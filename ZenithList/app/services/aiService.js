// app/services/aiService.js
import { addTask } from '../firebase/firestore';

/**
 * Generates tasks from a user prompt using a generic AI model endpoint.
 *
 * @param {string} prompt The user's prompt for task generation.
 * @param {string} apiKey The user's API key for the AI service.
 * @param {string} apiUrl The endpoint URL for the AI service.
 * @param {string} model The model name to use for the generation.
 * @returns {Promise<Array<string>>} A promise that resolves to an array of task titles.
 */
export const generateTasksFromPrompt = async (prompt, apiKey, apiUrl, model) => {
  if (!apiUrl || !model) {
    throw new Error("API URL and model must be provided.");
  }

  // This request body is structured similarly to OpenAI's API.
  // It can be adapted for other services like Anthropic, Cohere, etc.
  const requestBody = {
    model: model,
    messages: [
      {
        role: "system",
        content: "You are a helpful assistant that generates concise to-do lists based on user prompts. Please return the response as a valid JSON array of strings, where each string is a task title. For example: [\"Task 1\", \"Task 2\", \"Task 3\"]."
      },
      {
        role: "user",
        content: prompt
      }
    ]
  };

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`, // Standard Bearer token authentication
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorBody = await response.json();
      console.error('AI API Error:', errorBody);
      throw new Error('Failed to generate tasks from AI. Please check your API key and prompt.');
    }

    const data = await response.json();

    // The response structure assumes a format like OpenAI's: `choices[0].message.content`
    const jsonString = data.choices[0].message.content;

    // Clean the string to ensure it's valid JSON
    const cleanedJsonString = jsonString.replace(/```json|```/g, '').trim();

    // Parse the JSON string to get the array of tasks
    const tasks = JSON.parse(cleanedJsonString);

    if (!Array.isArray(tasks)) {
      throw new Error('AI response is not a valid JSON array of tasks.');
    }
    
    return tasks;

  } catch (error) {
    console.error('Error generating tasks:', error);
    // Return an empty array or handle the error as needed
    return [];
  }
};

/**
 * Adds an array of generated tasks to Firestore.
 *
 * @param {string} userId The ID of the user.
 * @param {Array<string>} tasks An array of task titles to be added.
 */
export const addGeneratedTasks = async (userId, tasks) => {
  if (!userId || !Array.isArray(tasks)) {
    console.error("Invalid arguments for addGeneratedTasks");
    return;
  }

  for (const taskTitle of tasks) {
    const newTask = {
      title: taskTitle,
      description: 'Generated by AI',
      priority: 'Medium', // Default priority
      dueDate: new Date(), // Default due date
      isCompleted: false,
    };
    await addTask(userId, newTask);
  }
};